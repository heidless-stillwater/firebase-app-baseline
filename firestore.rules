/**
 * @file Firestore Security Rules for Aetheria Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles, images, enhanced images, and style variations.
 * Contact form submissions are publicly writable.
 * @data_structure
 *   - /users/{userId}: Stores user profile information.
 *   - /users/{userId}/images/{imageId}: Stores image metadata.
 *   - /users/{userId}/images/{imageId}/enhancedImages/{enhancedImageId}: Stores metadata for enhanced versions of images.
 *   - /users/{userId}/images/{imageId}/styleVariations/{styleVariationId}: Stores metadata for style variations of images.
 *   - /contacts/{contactId}: Stores contact form submissions.
 * @key_security_decisions
 *   - User data is strictly private; only the authenticated user can access their data.
 *   - Image data and its associated enhanced images and style variations inherit the ownership of the parent user.
 *   - Contact form submissions are publicly writable to allow anyone to submit a contact form.
 * @denormalization_for_authorization Not applicable, as path-based ownership is used.
 * @structural_segregation Not applicable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching userId can access and modify their profile.
     * @deny (create) - Authenticated user cannot create a profile with a different userId.
     * @deny (get, update, delete) - Authenticated user cannot access or modify another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //isOwner function checks request.auth.uid == userId
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //isExistingOwner function checks that the document exists before permitting update and delete
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to images uploaded by a user.
     * @path /users/{userId}/images/{imageId}
     * @allow (create) - Authenticated user with matching userId can create an image.
     * @allow (get, update, delete) - Authenticated user with matching userId can access and modify their images.
     * @deny (create) - Authenticated user cannot create an image for a different userId.
     * @deny (get, update, delete) - Authenticated user cannot access or modify another user's images.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/images/{imageId} {

      //isOwner function checks request.auth.uid == userId
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //isExistingOwner function checks that the document exists before permitting update and delete
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to enhanced images generated from a user's image.
     * @path /users/{userId}/images/{imageId}/enhancedImages/{enhancedImageId}
     * @allow (create) - Authenticated user with matching userId can create an enhanced image.
     * @allow (get, update, delete) - Authenticated user with matching userId can access and modify their enhanced images.
     * @deny (create) - Authenticated user cannot create an enhanced image for a different userId.
     * @deny (get, update, delete) - Authenticated user cannot access or modify another user's enhanced images.
     * @principle Enforces document ownership for all operations, inheriting ownership from the parent image.
     */
    match /users/{userId}/images/{imageId}/enhancedImages/{enhancedImageId} {

      //isOwner function checks request.auth.uid == userId
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //isExistingOwner function checks that the document exists before permitting update and delete
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to style variations generated from a user's image.
     * @path /users/{userId}/images/{imageId}/styleVariations/{styleVariationId}
     * @allow (create) - Authenticated user with matching userId can create a style variation.
     * @allow (get, update, delete) - Authenticated user with matching userId can access and modify their style variations.
     * @deny (create) - Authenticated user cannot create a style variation for a different userId.
     * @deny (get, update, delete) - Authenticated user cannot access or modify another user's style variations.
     * @principle Enforces document ownership for all operations, inheriting ownership from the parent image.
     */
    match /users/{userId}/images/{imageId}/styleVariations/{styleVariationId} {

      //isOwner function checks request.auth.uid == userId
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //isExistingOwner function checks that the document exists before permitting update and delete
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to contact form submissions.
     * @path /contacts/{contactId}
     * @allow (create) - Any user can create a contact submission.
     * @deny (get, list, update, delete) - No user can get, list, update, or delete any contact submissions.
     * @principle Allows public creation of contact submissions, but prevents any other access.
     */
    match /contacts/{contactId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}